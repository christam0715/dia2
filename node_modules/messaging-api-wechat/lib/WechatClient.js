"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;

var _fs = _interopRequireDefault(require("fs"));

var _axiosError = _interopRequireDefault(require("axios-error"));
var _formData = _interopRequireDefault(require("form-data"));
var _axios = _interopRequireDefault(require("axios"));
var _debug = _interopRequireDefault(require("debug"));
var _lodash = _interopRequireDefault(require("lodash.omit"));
var _urlJoin = _interopRequireDefault(require("url-join"));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function ownKeys(object, enumerableOnly) {var keys = Object.keys(object);if (Object.getOwnPropertySymbols) {var symbols = Object.getOwnPropertySymbols(object);if (enumerableOnly) symbols = symbols.filter(function (sym) {return Object.getOwnPropertyDescriptor(object, sym).enumerable;});keys.push.apply(keys, symbols);}return keys;}function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};if (i % 2) {ownKeys(source, true).forEach(function (key) {_defineProperty(target, key, source[key]);});} else if (Object.getOwnPropertyDescriptors) {Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));} else {ownKeys(source).forEach(function (key) {Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));});}}return target;}function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}

























function throwErrorIfAny(response) {
  const { errcode, errmsg } = response.data;
  if (!errcode || errcode === 0) return response;
  const msg = `WeChat API - ${errcode} ${errmsg}`;
  throw new _axiosError.default(msg, {
    response,
    config: response.config,
    request: response.request });

}

const debugRequest = (0, _debug.default)('messaging-api-wechat');

function onRequest({ method, url, body }) {
  debugRequest(`${method} ${url}`);
  if (body) {
    debugRequest('Outgoing request body:');
    debugRequest(JSON.stringify(body, null, 2));
  }
}

class WechatClient {
  static connect(
  appIdOrClientConfig,
  appSecret)
  {
    return new WechatClient(appIdOrClientConfig, appSecret);
  }













  constructor(appIdOrClientConfig, appSecret) {_defineProperty(this, "_appId", void 0);_defineProperty(this, "_appSecret", void 0);_defineProperty(this, "_onRequest", void 0);_defineProperty(this, "_axios", void 0);_defineProperty(this, "_accessToken", '');_defineProperty(this, "_tokenExpiresAt", 0);
    let origin;
    if (appIdOrClientConfig && typeof appIdOrClientConfig === 'object') {
      const config = appIdOrClientConfig;

      this._appId = config.appId;
      this._appSecret = config.appSecret;
      this._onRequest = config.onRequest || onRequest;
      origin = config.origin;
    } else {
      this._appId = appIdOrClientConfig;
      this._appSecret = appSecret;
      this._onRequest = onRequest;
    }

    this._axios = _axios.default.create({
      baseURL: `${origin || 'https://api.weixin.qq.com'}/cgi-bin/`,
      headers: {
        'Content-Type': 'application/json' } });



    this._axios.interceptors.request.use(config => {
      this._onRequest({
        method: config.method,
        url: (0, _urlJoin.default)(config.baseURL, config.url),
        headers: _objectSpread({},
        config.headers.common, {},
        config.headers[config.method], {},
        (0, _lodash.default)(config.headers, [
        'common',
        'get',
        'post',
        'put',
        'patch',
        'delete',
        'head'])),


        body: config.data });

      return config;
    });
  }

  get axios() {
    return this._axios;
  }

  get accessToken() {
    return this._accessToken;
  }

  async _refreshToken() {
    const {
      access_token: accessToken,
      expires_in: expiresIn } =
    await this.getAccessToken();

    this._accessToken = accessToken;
    this._tokenExpiresAt = Date.now() + expiresIn * 1000;
  }

  async _refreshTokenWhenExpired() {
    if (Date.now() > this._tokenExpiresAt) {
      await this._refreshToken();
    }
  }

  /**
     * 获取 access_token
     *
     * https://mp.weixin.qq.com/wiki?t=resource/res_main&id=mp1421140183
     */
  getAccessToken() {
    return this._axios.
    get(
    `/token?grant_type=client_credential&appid=${this._appId}&secret=${this._appSecret}`).

    then(throwErrorIfAny).
    then(res => res.data);
  }

  /**
     * 临时素材
     *
     * 媒体文件保存时间为 3 天，即 3 天后 media_id 失效。
     *
     * 图片（image）- 2M，支持 PNG\JPEG\JPG\GIF 格式
     * 语音（voice）- 2M，播放长度不超过 60s，支持 AMR\MP3 格式
     * 视频（video）- 10MB，支持 MP4 格式
     * 缩略图（thumb）- 64KB，支持 JPG 格式
     */

  /**
         * 多媒体文件上传接口
         *
         * https://mp.weixin.qq.com/wiki?t=resource/res_main&id=mp1444738726
         */
  async uploadMedia(type, media) {
    await this._refreshTokenWhenExpired();

    const form = new _formData.default();

    form.append('media', media);

    return this._axios.
    post(
    `/media/upload?access_token=${this._accessToken}&type=image`,
    form,
    {
      headers: form.getHeaders() }).


    then(throwErrorIfAny).
    then(res => res.data);
  }

  /**
     * 下载多媒体文件接口
     *
     * https://mp.weixin.qq.com/wiki?t=resource/res_main&id=mp1444738727
     */
  async getMedia(mediaId) {
    await this._refreshTokenWhenExpired();

    return this._axios.
    get(`/media/get?access_token=${this._accessToken}&media_id=${mediaId}`).
    then(throwErrorIfAny).
    then(res => res.data);
  }

  /**
     * 发送消息-客服消息
     *
     * https://mp.weixin.qq.com/wiki?t=resource/res_main&id=mp1421140547
     */
  async sendRawBody(body) {
    await this._refreshTokenWhenExpired();

    return this._axios.
    post(`/message/custom/send?access_token=${this._accessToken}`, body).
    then(throwErrorIfAny).
    then(res => res.data);
  }

  /**
     * 发送文本消息
     */
  sendText(userId, text, options) {
    return this.sendRawBody(_objectSpread({
      touser: userId,
      msgtype: 'text',
      text: {
        content: text } },

    options));

  }

  /**
     * 发送图片消息
     */
  sendImage(userId, mediaId, options) {
    return this.sendRawBody(_objectSpread({
      touser: userId,
      msgtype: 'image',
      image: {
        media_id: mediaId } },

    options));

  }

  /**
     * 发送语音消息
     */
  sendVoice(userId, mediaId, options) {
    return this.sendRawBody(_objectSpread({
      touser: userId,
      msgtype: 'voice',
      voice: {
        media_id: mediaId } },

    options));

  }

  /**
     * 发送视频消息
     */
  sendVideo(userId, video, options) {
    return this.sendRawBody(_objectSpread({
      touser: userId,
      msgtype: 'video',
      video },
    options));

  }

  /**
     * 发送音乐消息
     */
  sendMusic(userId, music, options) {
    return this.sendRawBody(_objectSpread({
      touser: userId,
      msgtype: 'music',
      music },
    options));

  }

  /**
     * 发送图文消息（点击跳转到外链）
     *
     * 图文消息条数限制在 8 条以内，注意，如果图文数超过 8，则将会无响应。
     */
  sendNews(userId, news, options) {
    return this.sendRawBody(_objectSpread({
      touser: userId,
      msgtype: 'news',
      news },
    options));

  }

  /**
     * 发送图文消息（点击跳转到图文消息页面）
     *
     * 图文消息条数限制在 8 条以内，注意，如果图文数超过 8，则将会无响应。
     */
  sendMPNews(userId, mediaId, options) {
    return this.sendRawBody(_objectSpread({
      touser: userId,
      msgtype: 'mpnews',
      mpnews: {
        media_id: mediaId } },

    options));

  }

  /**
     * 发送卡券
     */
  sendWXCard(userId, cardId, options) {
    return this.sendRawBody(_objectSpread({
      touser: userId,
      msgtype: 'wxcard',
      wxcard: {
        card_id: cardId } },

    options));

  }

  /**
     * 发送小程序卡片（要求小程序与公众号已关联）
     */
  sendMiniProgramPage(
  userId,
  miniProgramPage,
  options)
  {
    return this.sendRawBody(_objectSpread({
      touser: userId,
      msgtype: 'miniprogrampage',
      miniprogrampage: miniProgramPage },
    options));

  }}exports.default = WechatClient;